version: '3.8'

# Define environment variables from .env file for substitution below
# Note: Service-specific env vars are better set in their 'environment' or 'env_file' sections
# x-variables: &env_vars
#  POSTGRES_DB: ${POSTGRES_DB:-smarttoll}
#  POSTGRES_USER: ${POSTGRES_USER:-user}
#  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}

services:
  # --- Kafka Ecosystem ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: smarttoll_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - smarttoll_net
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: smarttoll_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      # Port for clients outside docker network (your machine)
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Listener for clients inside the docker network (other services)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      # How clients can reach Kafka. INTERNAL for broker-to-broker and service-to-broker communication.
      # Use 'kafka:29092' internally. Use 'localhost:9092' externally.
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # Sensible defaults for single-node setup
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100 # Give consumers time to join
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # Confluent specific
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Confluent specific
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Auto create topics for development (DISABLE in production)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - smarttoll_net
    healthcheck:
      # A basic healthcheck - Kafka readiness is complex. Consider kafka-ready tools for prod.
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  # --- Core Infrastructure ---
  redis:
    image: redis:7.0-alpine
    container_name: smarttoll_redis
    ports:
      - "6379:6379"
    networks:
      - smarttoll_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres:
    image: postgis/postgis:15-3.3
    container_name: smarttoll_db
    env_file:
      - .env # Load PG user/pass/db from .env
    # environment: # Use env_file instead for sensitive values
    #   <<: *env_vars
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Mount init script directory if you have one
      # - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - smarttoll_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"] # Use $$ to escape $ for shell
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Application Services ---
  obu_simulator:
    build:
      context: ./obu_simulator
    container_name: smarttoll_simulator
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      LOG_LEVEL: DEBUG
      # Override Kafka broker if needed, default uses internal listener
      KAFKA_BROKER: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - smarttoll_net
    restart: unless-stopped # Keep simulator running

  toll_processor:
    build:
      context: ./toll_processor
      dockerfile: Dockerfile
    container_name: smarttoll_processor
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      # Set internal service names for dependencies
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - smarttoll_net
    restart: on-failure # Restart if the processor crashes

  billing_service:
    build:
      context: ./billing_service
      dockerfile: Dockerfile
    container_name: smarttoll_billing
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      # Set internal service names for dependencies
      KAFKA_BROKER: kafka:29092
      POSTGRES_HOST: postgres
      # Define how the API binds inside the container
      BIND_HOST: 0.0.0.0
      BIND_PORT: 8000
    ports:
      # Map internal port 8000 to host port 8001
      - "8001:8000"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - smarttoll_net
    restart: on-failure

volumes:
  postgres_data:
    driver: local # Default docker volume driver

networks:
  smarttoll_net:
    driver: bridge
