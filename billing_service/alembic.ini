# A generic Alembic configuration file.
# Refer to the Alembic documentation, located at:
# https://alembic.sqlalchemy.org/en/latest/

# the output encoding used to write log files and for stdout output
# output_encoding = utf-8

[alembic]
# path to migration scripts
script_location = alembic

# Ensure project root is on sys.path so Alembic can import the app module
prepend_sys_path = .

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that is installable
# with pip install python-dateutil.
# Defaults to None, which uses the output of datetime.datetime.utcnow()
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files within the
# versions/ directory
# sourceless = false

# The SQLAlchemy URL to connect to the database.
# Example:
# sqlalchemy.url = postgresql+psycopg2://user:password@localhost/dbname
# Uses environment variable substitution if available
# sqlalchemy.url = %(DB_CONNECTION_STRING)s
# Corrected: Use the actual URL or environment variable substitution
# Ensure this matches your actual database connection string or use environment variables
# For local Docker setup as defined:
# sqlalchemy.url = postgresql+psycopg2://smarttoll_user:changeme_in_prod_123!@postgres:5432/smarttoll_dev
# Example using environment variable (recommended for flexibility):
sqlalchemy.url = %(BILLING_DB_URL)s


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Revision file variables substitution
# Use Python's str.format() syntax for substitutions that are rendered
# into the revision file.
# The template variable names should be Python identifiers only.
# Available variables are:
# rev - the revision identifier
# down_rev - the down revision identifier
# branch_label - a string label identifying a branch
# version_path - the version path of the revision file
# depends_on - list of revision identifiers this revision depends on
# create_date - the date the revision file was created
# revision - same as 'rev'
# down_revision - same as 'down_rev'
#
# Example:
# revision_environment = true
# [revision_environment]
# user = ${user.name}
# create_date = %%(create_date)s
# message = %%(message)s

# Post-write hooks are Python functions that are run after a migration
# script has been generated.
# The functions are passed the generated script's path and the destination
# path.
# Example:
# [post_write_hooks]
# hooks = myhook1, myhook2
# myhook1.type = console_scripts
# myhook1.entrypoint = myproject:myfunc
# myhook1.options = --foo=bar --baz
# myhook2.type = exec
# myhook2.executable = /path/to/executable
# myhook2.options = --foo=bar --baz

